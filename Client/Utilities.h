#include "stdafx.h"
using  namespace std;
namespace Utilities {
	#define KeyVaultPath "XBLUmbrella:\\KV.bin"
	#define CPUKeyPath "XBLUmbrella:\\CPUKey.bin"
	#define ModulePath "XBLUmbrella:\\XBLUmbrella.xex"
	#define resourcePath "XBLUmbrella:\\XBLUmbrella.xzp"

	class MemoryBuffer {
		public:
			
		MemoryBuffer(DWORD Size = 0x200)
		{
			m_Buffer = 0;
			m_DataLength = 0;
			m_BufferSize = 0;
			if ((Size != 0) && (Size < UINT_MAX))
			{
				m_Buffer = (PBYTE)malloc(Size + 1);
				if (m_Buffer)
				{
					m_BufferSize = Size;
					m_Buffer[0] = 0;
				}
			}
		}
		~MemoryBuffer()
		{
			if (m_Buffer) free(m_Buffer);
			m_Buffer = 0;
			m_DataLength = 0;
			m_BufferSize = 0;
		}
		BOOL CheckSize(DWORD Size)
		{
			if (m_BufferSize >= (m_DataLength + Size)) return TRUE;
			else
			{
				DWORD NewSize = max((m_DataLength + Size), (m_BufferSize * 2));
				PBYTE NewBuffer = (PBYTE)realloc(m_Buffer, NewSize + 1);
				if (NewBuffer)
				{
					m_BufferSize = NewSize;
					m_Buffer = NewBuffer;
					return TRUE;
				}
				else return FALSE;
			}
		}
		VOID Add(CONST PVOID Buffer, DWORD Size)
		{
			if (CheckSize(Size))
			{
				memcpy(m_Buffer + m_DataLength, Buffer, Size);
				m_DataLength += Size;
				*(m_Buffer + m_DataLength) = 0;
			}
		}
		DWORD GetLength() CONST
		{
			return m_DataLength;
		}
		PBYTE GetBuffer() CONST
		{
			return m_Buffer;
		}
	private:
		PBYTE m_Buffer;
		DWORD m_DataLength;
		DWORD m_BufferSize;
	};

#define HvxPeekPokeExpID 0x48565050

#define HvxCall QWORD __declspec(naked)

	enum PEEK_POKE_TYPE {
		PEEK_BYTE = 0x0,
		PEEK_WORD = 0x1,
		PEEK_DWORD = 0x2,
		PEEK_QWORD = 0x3,
		PEEK_BYTES = 0x4,
		POKE_BYTE = 0x5,
		POKE_WORD = 0x6,
		POKE_DWORD = 0x7,
		POKE_QWORD = 0x8,
		POKE_BYTES = 0x9,
		PEEK_SPR = 0xA
	};
	DWORD HookFunctionStub(DWORD _Address, void* Function);
	DWORD HookFunctionStub(CHAR* ModuleName, DWORD Ordinal, void* Destination);
	CONST BYTE HvxPeekPokeExp[0x2F0] = {
		0x48, 0x58, 0x50, 0x52, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x34, 0x1F, 0xD6, 0xDA,
		0x2F, 0xCA, 0xA8, 0x17, 0xF0, 0x30, 0xCC, 0x44, 0x0A, 0x41, 0xFA, 0x7C, 0xA0, 0xC1, 0xFD, 0x33,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x7A, 0x02, 0x59, 0x43, 0x9E, 0xE6, 0x93, 0xD5, 0x01, 0xC9, 0x48, 0x4D, 0xB2, 0xBF, 0x9D, 0x18,
		0xA9, 0x16, 0x5E, 0xFF, 0x1E, 0xD5, 0xB6, 0xA8, 0x79, 0x60, 0xA8, 0x2F, 0xC1, 0x8D, 0x20, 0x8A,
		0xEB, 0x46, 0xC3, 0x01, 0xEC, 0xC4, 0xDB, 0xDF, 0xA1, 0x04, 0xD1, 0xDF, 0x23, 0x69, 0x5E, 0xCC,
		0x50, 0xC3, 0xF4, 0xDD, 0xA4, 0x80, 0x7D, 0x05, 0x2D, 0x57, 0xFF, 0x60, 0xA5, 0x58, 0x69, 0x27,
		0x9A, 0x33, 0x70, 0xE8, 0xC2, 0x82, 0xDC, 0xDA, 0xE2, 0x4D, 0xE1, 0xF8, 0xA1, 0xD2, 0xCC, 0x8D,
		0x98, 0x05, 0xD1, 0xA3, 0x2E, 0x37, 0x06, 0x0F, 0xF7, 0xEF, 0x70, 0xEF, 0x28, 0xD7, 0xAE, 0xD5,
		0x5B, 0x19, 0x1B, 0x13, 0x50, 0x0D, 0x15, 0x00, 0x92, 0x01, 0xEE, 0x38, 0xA7, 0x61, 0xB1, 0xA1,
		0x27, 0xBF, 0xB0, 0x42, 0x0F, 0x07, 0xC3, 0x8F, 0x78, 0xAD, 0xAF, 0x87, 0x8F, 0x34, 0x8A, 0xA6,
		0x69, 0x7D, 0x40, 0xB6, 0x5C, 0x9E, 0x01, 0xEC, 0x9F, 0x5E, 0x78, 0x30, 0x09, 0x5A, 0x21, 0xFF,
		0x35, 0x8C, 0x13, 0xBE, 0xBC, 0x92, 0x67, 0xE3, 0x17, 0x0B, 0x09, 0x1C, 0xE2, 0x9D, 0xEC, 0xFD,
		0xFB, 0x6C, 0x49, 0x3A, 0xCC, 0xE7, 0x99, 0xB6, 0xB3, 0x8A, 0x8F, 0xEF, 0xF7, 0xA0, 0x28, 0x4F,
		0x72, 0xC7, 0x3D, 0xD7, 0xCC, 0xEB, 0xB2, 0x1B, 0x74, 0x93, 0xD7, 0x02, 0x05, 0xD5, 0xE1, 0x25,
		0x35, 0xD7, 0xE0, 0x50, 0xEA, 0xCF, 0x82, 0x69, 0xE3, 0x3B, 0x6F, 0xFA, 0x13, 0xF0, 0x5B, 0xD9,
		0x1A, 0xB0, 0xD3, 0x0B, 0x85, 0x4D, 0x6A, 0xFC, 0x31, 0x45, 0xC3, 0xA3, 0xFA, 0x7E, 0xDA, 0x93,
		0x84, 0xD4, 0xE7, 0xFA, 0xAB, 0x7C, 0x22, 0x96, 0x54, 0x69, 0x7F, 0xC9, 0xF8, 0xC4, 0x5A, 0xC2,
		0x82, 0x99, 0x34, 0x46, 0x81, 0x6F, 0x06, 0x33, 0x19, 0x94, 0x74, 0xA4, 0x76, 0x02, 0x4F, 0xB9,
		0x48, 0x56, 0x50, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x60, 0x00, 0x00, 0x01, 0x90,
		0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00,
		0x7D, 0x88, 0x02, 0xA6, 0xFB, 0xE1, 0xFF, 0xF0, 0xF9, 0x81, 0xFF, 0xF8, 0x94, 0x21, 0xFF, 0x00,
		0x7C, 0x9F, 0x23, 0x78, 0x2C, 0x1F, 0x00, 0x00, 0x41, 0x82, 0x00, 0xC0, 0x2C, 0x1F, 0x00, 0x01,
		0x41, 0x82, 0x00, 0xC0, 0x2C, 0x1F, 0x00, 0x02, 0x41, 0x82, 0x00, 0xC0, 0x2C, 0x1F, 0x00, 0x03,
		0x41, 0x82, 0x00, 0xC0, 0x2C, 0x1F, 0x00, 0x0A, 0x41, 0x82, 0x00, 0x64, 0x2C, 0x1F, 0x00, 0x05,
		0x41, 0x82, 0x00, 0xD4, 0x2C, 0x1F, 0x00, 0x06, 0x41, 0x82, 0x00, 0xD4, 0x2C, 0x1F, 0x00, 0x07,
		0x41, 0x82, 0x00, 0xD4, 0x2C, 0x1F, 0x00, 0x08, 0x41, 0x82, 0x00, 0xD4, 0x2C, 0x1F, 0x00, 0x0B,
		0x40, 0x80, 0x00, 0x00, 0x80, 0x60, 0x00, 0x4C, 0x7C, 0x62, 0x1A, 0x14, 0x80, 0x63, 0x00, 0x08,
		0x7C, 0x69, 0x03, 0xA6, 0x7C, 0xC3, 0x33, 0x78, 0x38, 0x80, 0x00, 0x01, 0x4E, 0x80, 0x04, 0x21,
		0x7C, 0x66, 0x1B, 0x78, 0x7C, 0xE9, 0x03, 0xA6, 0x2C, 0x1F, 0x00, 0x04, 0x41, 0x82, 0x00, 0x6C,
		0x2C, 0x1F, 0x00, 0x09, 0x41, 0x82, 0x00, 0xA0, 0x48, 0x00, 0x00, 0x00, 0x48, 0x00, 0x00, 0x05,
		0x7C, 0xA6, 0x2B, 0x78, 0x3C, 0x80, 0x7C, 0x60, 0x50, 0xA6, 0x54, 0x6A, 0x60, 0x84, 0x02, 0xA6,
		0x50, 0xC4, 0x32, 0xE8, 0x7C, 0x68, 0x02, 0xA6, 0x38, 0x63, 0x00, 0x30, 0x90, 0x83, 0x00, 0x00,
		0x7C, 0x00, 0x18, 0x6C, 0x7C, 0x00, 0x1F, 0xAC, 0x7C, 0x00, 0x04, 0xAC, 0x4C, 0x00, 0x01, 0x2C,
		0x7C, 0x79, 0x4A, 0xA6, 0x48, 0x00, 0x00, 0x98, 0x88, 0x65, 0x00, 0x00, 0x48, 0x00, 0x00, 0x90,
		0xA0, 0x65, 0x00, 0x00, 0x48, 0x00, 0x00, 0x88, 0x80, 0x65, 0x00, 0x00, 0x48, 0x00, 0x00, 0x80,
		0xE8, 0x65, 0x00, 0x00, 0x48, 0x00, 0x00, 0x78, 0x8B, 0xE5, 0x00, 0x00, 0x9B, 0xE6, 0x00, 0x00,
		0x38, 0xA5, 0x00, 0x01, 0x38, 0xC6, 0x00, 0x01, 0x42, 0x00, 0xFF, 0xF0, 0x38, 0x60, 0x00, 0x00,
		0x48, 0x00, 0x00, 0x5C, 0x98, 0xC5, 0x00, 0x00, 0x48, 0x00, 0x00, 0x40, 0xB0, 0xC5, 0x00, 0x00,
		0x48, 0x00, 0x00, 0x38, 0x90, 0xC5, 0x00, 0x00, 0x48, 0x00, 0x00, 0x30, 0xF8, 0xC5, 0x00, 0x00,
		0x48, 0x00, 0x00, 0x28, 0x8B, 0xE6, 0x00, 0x00, 0x9B, 0xE5, 0x00, 0x00, 0x7C, 0x00, 0x28, 0x6C,
		0x7C, 0x00, 0x2F, 0xAC, 0x7C, 0x00, 0x04, 0xAC, 0x4C, 0x00, 0x01, 0x2C, 0x38, 0xA5, 0x00, 0x01,
		0x38, 0xC6, 0x00, 0x01, 0x42, 0x00, 0xFF, 0xE0, 0x38, 0x60, 0x00, 0x00, 0x7C, 0x00, 0x28, 0x6C,
		0x7C, 0x00, 0x2F, 0xAC, 0x7C, 0x00, 0x04, 0xAC, 0x4C, 0x00, 0x01, 0x2C, 0x38, 0x21, 0x01, 0x00,
		0xEB, 0xE1, 0xFF, 0xF0, 0xE9, 0x81, 0xFF, 0xF8, 0x7D, 0x88, 0x03, 0xA6, 0x4E, 0x80, 0x00, 0x20
	};

	static HvxCall HvxExpansionInstall(DWORD PhysicalAddress, DWORD CodeSize) {
		__asm {
			li			r0, 0x72
			sc
			blr
		}
	}
	static HvxCall HvxExpansionCall(DWORD ExpansionId, QWORD Param1 = 0, QWORD Param2 = 0, QWORD Param3 = 0, QWORD Param4 = 0) {
		__asm {
			li			r0, 0x73
			sc
			blr
		}
	}

	enum DL_ORDINALS {
		DL_ORDINALS_LDAT = 0x1,
		DL_ORDINALS_STARTSYSMOD = 0x2,
		DL_ORDINALS_SHUTDOWN = 0x3,
		DL_ORDINALS_FORCEINILOAD = 0x4,
		DL_ORDINALS_GETNUMOPTS = 0x5,
		DL_ORDINALS_GETOPTINFO = 0x6,
		DL_ORDINALS_GETOPTVAL = 0x7,
		DL_ORDINALS_SETOPTVAL = 0x8,
		DL_ORDINALS_GETOPTVALBYNAME = 0x9,
		DL_ORDINALS_SETOPTVALBYNAME = 0xA,
		DL_ORDINALS_GETDRIVELIST = 0xB,
		DL_ORDINALS_GETDRIVEINFO = 0xC
	};

	static VOID XNotify(PWCHAR String) { XNotifyQueueUI(Globals::NotifyType, XUSER_INDEX_ANY, XNOTIFYUI_PRIORITY_HIGH, String, 0); }

	static VOID XNotifyUI(XNOTIFYQUEUEUI_TYPE Type, PWCHAR String)
	{
		Globals::NotifyType = Type;
		if (KeGetCurrentProcessType() != PROC_SYSTEM) CreateThread(0, 0, 0, XNotify, 0, 0);
		else XNotify(String);
	}

	extern wchar_t *convertCharArrayToLPCWSTR(const char* charArray);
	extern BOOL TrayOpen();
	extern BOOL FileExists(CONST PCHAR FilePath);
	extern VOID NotifyPopup(PWCHAR myPWCHAR);
	extern BOOL CReadFile(CONST PCHAR FilePath, MemoryBuffer &Buffer);
	extern BOOL CWriteFile(CONST PCHAR FilePath, CONST PVOID Buffer, DWORD Size);
	extern BOOL InitializeHvxPeekPoke();
	extern BYTE HvxPeekBYTE(QWORD Address);
	extern WORD HvxPeekWORD(QWORD Address);
	extern DWORD HvxPeekDWORD(QWORD Address);
	extern QWORD HvxPeekQWORD(QWORD Address);
	extern DWORD HvxPeekBytes(QWORD Address, PVOID Buffer, DWORD Size);
	extern DWORD HvxPokeBYTE(QWORD Address, BYTE Value);
	extern DWORD HvxPokeWORD(QWORD Address, WORD Value);
	extern DWORD HvxPokeDWORD(QWORD Address, DWORD Value);
	extern DWORD HvxPokeQWORD(QWORD Address, QWORD Value);
	extern DWORD HvxPokeBytes(QWORD Address, CONST PVOID Buffer, DWORD Size);
	extern VOID ApplyPatches(CONST PVOID Buffer);
	extern VOID ApplyPatches(QWORD Address, CONST PVOID Buffer);
	extern DWORD ResolveFunction(PCHAR Module, DWORD Ordinal);
	extern FARPROC ResolveFunction(HMODULE hHandle, DWORD Ordinal);
	extern DWORD Resolve(HMODULE Module, int ordinal);
	extern VOID PatchInJump(PDWORD Address, DWORD Destination, BOOL Linked);
	extern VOID HookFunctionStart(PDWORD Address, PDWORD SaveStub, DWORD Destination);
	extern DWORD PatchModuleImport(PLDR_DATA_TABLE_ENTRY Module, PCHAR Import, DWORD Ordinal, DWORD Destination);
	extern DWORD PatchModuleImport(PCHAR Module, PCHAR Import, DWORD Ordinal, DWORD Destination);
	extern DWORD MountPath(PCHAR Drive, PCHAR Device);
	extern VOID MakeThread(LPTHREAD_START_ROUTINE Address);
	extern VOID SetLiveBlock(BOOL State);
	extern BOOL FindPaths();
	extern PBYTE GetCPUKey();
	extern PBYTE GetKeyVault();
	extern BOOL SetKeyVault();
	extern PWCHAR LinkWChar(PWCHAR Text, ...);
	extern PWCHAR PCHARtoWCHAR(PCHAR Text, ...);
	extern std::string utf8_encode(const std::wstring &wstr);
	extern std::wstring utf8_decode(const std::string &str);
	extern HRESULT SetMemory(VOID * Destination, VOID * Source, DWORD Length);
	bool hasConnection();
	DWORD makeBranch(DWORD branchAddr, DWORD destination, BOOL linked);
	VOID replaceHudString(const char* newtext, DWORD addr, INT length);
	HANDLE searchForHandle(CONST CHAR* mName);
	static VOID(_cdecl *XNotifyQueueUI)(XNOTIFYQUEUEUI_TYPE exnq, DWORD dwUserIndex, ULONGLONG qwAreas, PWCHAR displayText, PVOID contextData) = (VOID(*)(XNOTIFYQUEUEUI_TYPE, DWORD, ULONGLONG, PWCHAR, PVOID))Utilities::ResolveFunction("xam.xex", 0x290);
	static VOID(_cdecl *XeCryptRandom)(BYTE *pb, DWORD cb) = (VOID(*)(BYTE *, DWORD))Utilities::ResolveFunction("xboxkrnl.exe", 0x18A);
	DWORD GetFunctionSize(DWORD* pdwAddress);
	static string GetModuleNameFromAddress(DWORD dwAddress);
	BOOL writeFile(const CHAR* FilePath, const VOID* Data, DWORD Size);
}